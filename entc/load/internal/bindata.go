// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdf\x6e\xdb\xc6\xd2\xbf\x16\x9f\x62\x6a\x20\x86\x18\xa8\x54\x5a\x7c\xf8\x80\xa3\x40\x17\x45\xe3\xe0\xe8\xf4\xc4\x29\x9a\xa4\x37\x41\x90\xd2\xe4\x50\xda\x84\x5c\x32\xbb\x2b\xc7\xaa\xeb\x77\x3f\x98\x99\x5d\x72\x29\xc9\x4a\x9a\x34\xba\x31\x39\x3b\xb3\x33\xf3\xdb\xf9\xc7\xf5\x7c\x0e\x3f\xb7\xdd\xce\xa8\xf5\xc6\xc1\x8f\x8f\x7e\xf8\xd7\xf7\x9d\x41\x8b\xda\xc1\xd3\xbc\xc0\xab\xb6\x7d\x0f\x2b\x5d\x64\xf0\x53\x5d\x03\x33\x59\xa0\x75\x73\x8d\x65\x96\xcc\xe7\xf0\x72\xa3\x2c\xd8\x76\x6b\x0a\x84\xa2\x2d\x11\x94\x85\x5a\x15\xa8\x2d\x96\xb0\xd5\x25\x1a\x70\x1b\x84\x9f\xba\xbc\xd8\x20\xfc\x98\x3d\x0a\xab\x50\xb5\x5b\x5d\xd2\x16\x4a\x33\xcb\x7f\x57\x3f\x5f\x5c\xbe\xb8\x80\x4a\xd5\x18\x68\xa6\x6d\x1d\x94\xca\x60\xe1\x5a\xb3\x83\xb6\x02\x17\xe9\x73\x06\x31\x4b\x92\x2e\x2f\xde\xe7\x6b\x84\xba\xcd\xcb\x24\x51\x4d\xd7\x1a\x07\xd3\x64\x72\x86\xba\x68\x4b\xa5\xd7\xf3\x77\xb6\xd5\x67\xc9\xe4\xac\x6a\x1c\xfd\x31\x58\xd5\x58\xb8\xb3\x24\x99\x9c\xad\x95\xdb\x6c\xaf\xb2\xa2\x6d\xe6\x95\x77\x58\xe9\x62\x7b\x95\xbb\xd6\xcc\x51\x33\xff\xa7\x78\xe6\xb6\xd8\x60\x93\xcf\xb1\x5c\xe3\xdf\xe1\xaf\x14\xd6\xe5\x59\x92\x26\x84\xc2\x0b\xa6\x81\x41\x8f\xbf\x85\x5c\x03\x6a\x97\xf9\x05\xb7\xc9\x1d\x7c\xcc\x2d\xbb\x89\x25\x54\xa6\x6d\x20\x87\xa2\x6d\xba\x5a\x11\xd6\x16\x0d\x78\x28\xb2\xc4\xed\x3a\x0c\x5b\x5a\x67\xb6\x85\x83\xdb\x64\x72\x99\x37\x08\x00\x44\x51\x7a\x4d\x4f\xf0\x07\x61\xb3\x38\xd3\x79\x83\xb3\xb6\x51\x0e\x9b\xce\xed\xce\xfe\x48\x26\x3f\xb7\xba\x52\x6b\x60\x13\xfc\xb3\xe7\x2d\xf8\x6d\xcc\x7d\x51\xae\xd1\x02\xc0\xeb\x37\x0f\xe9\x31\xda\x99\x40\xb1\x63\xe6\xa7\xe4\xb7\x65\x66\x7e\x1c\x98\x19\x91\x3d\xee\x95\x2e\xf1\x06\x2d\x71\xf3\xe3\xc0\xad\x64\x65\xcc\xfe\xef\xb6\x7d\x4f\x96\x28\xed\xc0\xff\x3c\xfb\x86\x56\x46\xcc\x77\x8c\xfc\xaf\xad\x55\x4e\xb5\x1a\x4a\xb4\x85\x51\x57\x68\x21\x07\xb6\x04\xba\xb0\xe4\xe3\x51\x0e\xce\xc3\xdb\xcb\x0d\x00\x07\x03\x83\xfe\xf9\x1c\xc4\x43\x36\x35\xec\x22\x7b\xd7\xca\xba\x2c\x99\x3c\x53\x37\x58\xae\x34\x89\x5c\xb5\x6d\x4d\x22\x2b\x5d\xaa\x22\x77\x68\x41\x55\x91\x00\x1d\x7e\x43\xdc\xdf\x2b\x2d\x82\x4a\xaf\xfc\xbe\xa2\x8b\x49\x63\x5d\x0d\x93\x44\x97\xb8\x2b\x06\x1d\xc6\x99\xd0\xbf\x20\xcc\x44\xf0\x30\xca\xe4\x17\xc5\xda\xe9\x80\x5b\xe9\xaa\x1d\xd8\x1e\xb2\xcf\xd9\xcb\x5d\x87\xbc\xe0\xc5\x48\xe1\x58\xec\x65\x1e\x6d\x7e\x9f\x36\x97\xef\xc5\xeb\x0b\xf5\x67\x64\xe3\x43\xa5\xdd\xff\xff\xdf\x81\x94\x55\x7f\xee\x29\xbb\xd0\xdb\xc6\xf6\x6c\xaf\xdf\x8c\xd5\x85\x88\x27\xa6\xb1\xdc\x2b\xad\x3e\x6c\x7b\x85\x7c\xce\x70\xa0\x6e\xcb\x4c\x63\xc1\x4b\x55\xd7\xf9\x55\x8d\x27\x05\xb5\x67\x1a\x8b\x3e\xef\x28\x38\xf3\xfa\xa4\x68\xeb\x99\xc6\xa2\x4f\xb0\xca\xb7\xb5\x3b\x6d\x6e\x29\x4c\x47\x25\x7f\xcf\x6b\x72\x57\x69\x87\x86\x4a\xe0\xed\xdd\x11\xc9\xb7\xd7\xc4\xb5\x07\x54\x57\xe6\x0e\x83\xfe\xfb\x80\x62\xa6\xb7\x47\x0d\x58\x35\xcd\xd6\xf5\x88\xdd\xb3\x81\x0a\x4c\x63\xd9\xdf\xf3\x5a\x95\x54\xa4\xf9\x88\xa3\x02\x12\xcb\x5e\xf7\x4c\x7b\x11\xe5\x5a\x93\xaf\xf1\x17\xdc\x9d\x88\x43\x2b\x4c\x6f\xdf\xe3\x6e\x2c\xdd\xd7\x12\x89\xc7\xf1\x6b\x90\x0e\xd5\x68\x4f\x31\x6a\x22\x5f\x9f\xf4\xd8\x06\xa6\x23\xf5\x8f\x0b\xf6\x61\x3d\x60\xf2\x17\x94\x03\x96\x3b\x52\x0d\x3c\x24\xf7\xe6\x3f\xa5\xfa\x11\xc6\x13\x19\xbf\xc7\xb8\x9f\xe3\xbf\x61\x25\xca\xc7\x7c\x06\xab\xb7\x87\xda\x7f\xc3\xca\x63\x2f\xfd\x6b\x60\xbe\x27\x93\x3d\xd0\x27\x72\x77\xa5\xaf\xd1\x58\xdc\x67\x55\x42\xde\x57\xff\x61\xab\x0c\x96\x7b\xbc\xc6\x93\x8f\x9c\x9a\x54\xfe\xc3\x63\x13\xfa\x17\x9c\x9b\x08\x0e\x07\x17\xd5\xac\x3e\xa8\x4e\x78\x1b\x26\x80\xb8\x2e\x7e\x7a\x04\x38\xc2\x7d\x6c\x06\x88\x92\xab\xcf\xac\x4f\xa4\x94\xa0\x74\x89\x1f\xf9\x3c\x0b\x83\xdc\x50\x73\x1d\x10\x21\xa3\x04\x16\x7e\x92\xde\xdf\xb9\xd6\x64\x49\xb5\xd5\x45\x90\x9c\x62\x09\x0f\x89\x23\x7b\xd2\x73\xa4\x3e\x48\x6e\x93\x89\x46\x58\x2c\xe1\x9c\x5e\x6f\x93\x09\x85\xe6\x42\x30\xc0\x32\x7b\x99\xaf\x67\x44\xdb\x75\xb8\xe8\x69\x14\xcd\xc9\x84\xb3\xa2\x27\xd2\x0b\x11\x05\xf1\x85\x10\xe5\x85\xc8\x3e\x8e\x16\x4c\xf6\x2f\x44\x0f\x31\xb3\x20\x7a\x78\x91\x85\xca\xef\xcf\x0b\x95\xdf\xff\x2e\x99\xa8\x0a\x0c\x56\x64\xb2\xac\x3c\xe6\xd7\xef\x96\xa0\x55\x4d\xee\x4c\x34\x12\x19\x96\xbd\xfb\x06\xab\x94\x45\x0d\xba\xad\xd1\xa0\x71\x40\x56\x1a\xff\x21\xb4\x32\xae\x9c\xc6\x96\x65\xa7\x55\x19\x1a\x7d\x8c\xee\x54\xc6\xc2\x19\xa0\x31\xf4\x7e\x9b\x4c\x2c\x1b\x7d\xce\xf4\xdb\x11\x7e\xfc\xab\x06\x10\x69\x5a\x18\xaf\x10\x65\x36\x3a\x9c\xb0\xe2\x4f\x88\xbb\xfa\x22\x5e\x60\xca\xf8\x48\xc2\xd2\x70\x2e\xa1\x37\x2f\x06\x1b\x42\x23\x4e\x26\x7d\xfb\x1d\x56\x03\x85\x56\x7d\x87\x5b\x0c\xfb\x86\x9e\x27\x87\xc1\xba\xe3\x5e\xb8\x60\xdd\xa3\xee\x38\x70\xf6\x4d\x6f\xd1\xfb\xdc\x77\xb8\x64\x12\x65\xcf\xc2\x2f\x0f\x14\x5a\x1f\xfa\x1e\xaf\xd7\xa8\xa7\x55\x99\x0d\xd4\x94\x37\x09\x1d\xa4\xd7\xd1\x53\xfa\xd8\xb2\x15\x83\x0d\xcb\x21\xa0\x42\xd8\xa8\x7a\x06\x55\xe3\xb2\x0b\x3a\xd2\x6a\x7a\xd6\x28\x6b\x29\x8f\xb9\xf4\x28\x12\xaa\x5a\xe3\x23\xe7\xc1\x87\xb3\x19\xed\x45\x47\x9a\xf6\x7b\xd3\xc4\xb6\x58\x02\x8f\x6a\x64\x1f\x8d\x70\xe9\x63\xa1\x7f\xb7\x84\x47\xac\xce\x56\x4c\x87\x25\x9c\xd3\x02\x0b\x53\xb1\x94\x39\xda\x4f\x0c\xc0\x83\x07\x14\xb9\x86\x2b\x04\xfe\x4a\xc4\x12\x5c\xcb\x3c\x6b\xd4\x68\x72\x8e\x55\x92\x7c\xda\x1a\xc0\x9b\xbc\xe9\x6a\x9c\x81\x6e\x1d\x7d\x1a\x6c\x75\xc1\xcd\xb9\x56\xef\x11\x9c\x6a\x30\xbb\x6c\x3f\x66\x6c\xe5\x5b\x0e\x5a\xb2\x93\xaa\x53\xf6\x2c\x37\x76\x93\xd7\xd3\xe1\x7c\xd3\xc7\xcc\x10\x21\x64\xab\x6c\x34\x35\x2d\xa3\x68\x08\xce\xfb\x28\xe6\xf2\x41\xb2\xc3\x70\xfc\xea\xd5\xea\x09\x9c\x9f\x1f\x46\x10\xef\xed\x76\x1d\xd9\xe2\x3f\x78\x59\xe0\x79\x15\x5b\x93\x4c\x68\x7b\xb7\xeb\xb2\x5f\x94\x2e\xa7\x29\x09\x07\xee\xa7\x94\xaa\x7f\xfd\xc5\xab\x97\xdb\x66\xa5\x65\xf9\x51\x44\x7b\xbe\x75\x42\xfc\x21\x10\x89\xf2\x28\xcd\x5e\x70\x95\x96\xb5\x60\x7c\x4f\x23\xcb\xee\x0d\x0c\xbc\xe9\xb0\x70\x12\x17\x53\x82\x7a\x9a\xc2\x03\x9b\x72\x78\x6c\xb7\xaa\x1c\x1f\xe2\xd9\xec\x60\x7b\xf2\xe9\x2e\x2e\x59\xb6\x9a\x91\x1a\x5f\xb7\xfc\x91\xf8\x6f\x63\x39\x7c\x3e\xf8\xe8\x5b\xbb\x9f\x5b\xe9\xa9\x85\x1c\xfe\xf3\xe2\xf9\x25\x09\x73\x5b\xf5\x71\x53\xa2\xc4\x0d\xb3\xd0\x06\x5e\xb8\xbd\x7a\x47\x0e\xc8\x1f\x5f\xf0\x46\x4a\xa7\x36\xe8\xa6\x6e\xed\x35\xa5\x30\xbd\x82\xd7\x6f\xae\x76\x0e\x25\x84\xa2\xda\xc7\xa5\x4f\x64\x09\x3a\xf9\x1a\x5f\x84\x8f\x51\x79\x9d\xa6\x71\x5b\x51\x5a\x2e\x4d\xa6\x7b\x27\x2f\x22\x69\xca\xa9\xc5\x22\x12\x5f\x3e\x66\x6d\x46\x15\x5c\x7a\x73\xe0\x95\x78\xfd\xee\xd3\x19\xed\xbd\x7a\xf0\x61\x01\x0f\xae\x29\x81\xa5\x24\x93\xb8\x24\xb1\x8c\x01\xbd\xae\xbc\x42\x9e\x19\x82\xa2\xde\x90\x7f\x42\x17\x45\x0b\xe5\x22\x47\x7f\xae\xd7\xc8\x9d\xc8\x4a\xc2\x65\x32\xab\x2c\x21\xef\x3a\xd4\xe5\xd4\x13\x66\x43\xcf\x8f\xda\xd1\x34\x4d\x7d\x0d\xf2\xb7\x0d\xb1\x03\xfe\x6e\xe2\x5b\xba\xa0\xca\x9b\xc1\x09\x6f\x03\x6f\xec\x17\x54\x79\x33\xb2\x96\x1d\x0c\x77\x26\x91\x8b\xab\x60\xfe\x39\x3f\x71\x0e\xb2\xdb\xbe\x07\xd1\x3e\x02\x03\xad\x48\x0c\x2c\xfa\x15\x79\xe7\xa5\xb8\x25\xd2\xd2\xd0\x10\x47\x8d\x86\x96\xc6\x6d\xe6\x2e\x3d\x1a\x6e\x7c\x61\xf3\xcf\x47\x9b\x17\x1c\x95\x61\x9b\xfa\x22\x30\x84\x39\x3f\x5a\xdf\x78\x5c\xeb\x93\xca\x0f\x2f\x71\x82\xfa\x4c\x9e\x5a\x78\x28\xa9\x98\xc2\x41\xb2\xec\xa7\x34\xe7\x30\xb9\xc1\xb7\x30\xa3\xc8\xe1\xab\x9a\xcf\x88\x1b\x34\xa6\x8f\x06\x35\x83\x26\x0a\x06\xb9\xda\x21\x5e\x3f\x32\xc7\xfb\x7b\xbb\x9a\x1b\x5f\xe2\xf7\x76\x1f\x6d\x4f\xfb\xb3\x82\x77\x33\xa8\x86\xfd\x65\x57\x61\xa7\x1a\xea\x77\x1f\x86\xb7\x71\x96\x10\xdb\x11\x45\x63\x4d\xac\x8a\x5a\x5e\xff\x85\xbb\x84\xf3\xf0\x2c\xfc\x1c\x9e\x3e\x28\xdf\x71\x58\x85\x3b\x32\x26\x3a\xe3\x83\x2d\xba\x00\x5b\x80\x9a\x0d\x9b\xfb\x60\x8d\x83\xdf\x87\x2f\xd8\x6a\xe8\x0e\xf7\x83\xf6\xb7\x4f\xe5\x38\x68\x9f\x87\xd9\xe7\x9c\xcd\x7d\x78\x05\xe7\x99\xe7\x53\x6e\x47\x33\xbc\x34\xc3\xa3\xf1\x1c\x67\xe3\xbd\xe1\x2c\x37\xa9\x31\x72\xa3\x24\xfe\x0c\xe0\x6c\x26\xf7\xb4\x4b\x9e\x36\x79\xbf\x74\xdf\xbe\xf9\x3c\x3a\x14\xf8\x68\xf2\xce\xc6\x97\xb0\x9e\x9e\xeb\x52\x32\x21\x10\x1a\x74\x9b\xb6\x84\x8f\xca\x6d\xc0\x60\xd1\x5e\xa3\xa1\xc4\x46\x6d\xb7\x06\x41\xb7\xd0\xe5\x5a\x15\x16\x94\x86\x46\xea\x82\xd2\x6b\x9f\xdd\x51\x10\x54\x65\x74\x7d\x05\x9e\x98\xc2\xeb\x37\xc3\x5d\xe9\x5d\x0a\x53\x7f\xde\x11\x79\xbf\x7d\x97\x58\xa1\x01\x3f\xc9\xdc\xca\x89\x5f\xcb\x54\xc6\xc6\x4d\xd3\xc7\x70\x3d\x3a\x7f\x1e\x10\x47\xd5\xee\xc1\xcb\xe0\x9d\x18\xef\x8b\x5e\x55\xce\xe0\x9a\x13\xaf\x0a\x67\x4f\xd8\x49\x84\x4f\x07\x40\xab\x32\x0b\x0e\xcc\xf6\xd0\x95\x56\x78\x00\xae\x90\xbf\x16\xca\xb8\xbf\x1f\x8c\x3b\xd2\x90\x05\x38\x62\xfc\x16\xb8\x8d\xbc\x19\x41\x27\xb0\xa1\x1f\x04\x8e\xa2\x16\x0b\x1f\x02\x17\x5a\xec\x01\x74\x61\xe1\x6b\xc1\x1b\xcf\x16\x07\xf0\xa9\xfe\xdf\x22\xfd\xad\xcf\x37\x44\x30\x38\x75\x04\x43\xd5\xcf\x1a\xa7\x50\x0c\xde\x1c\xe0\x28\xff\xb3\x38\x40\x51\xc8\x5f\x8b\x61\xdc\x65\x0f\x10\x94\xfe\x29\xf8\x3d\x1b\x1a\xf4\x37\xc1\x4f\xdc\x39\x82\x9e\x18\x71\x1a\x3b\xf1\xe2\x00\x39\xa9\xa0\x07\xc8\x09\xf9\x6b\x91\x3b\xd5\x07\xa4\x5e\x7b\xe4\x88\xf1\x1b\x02\x27\xde\x1c\x01\x6e\xe3\xfb\xc7\x29\xe0\xc4\x89\x01\x38\xf6\xae\xff\x36\x72\xa3\xef\xe2\x74\xf4\x46\x56\x51\x73\x77\xe1\xbb\x78\x39\x7c\x17\xff\xea\x8c\x7c\x5c\xc3\x12\x5c\x76\x51\x63\x33\x1d\xb5\x57\x97\xdc\x25\xff\x0b\x00\x00\xff\xff\x1e\x69\xf8\x4d\x57\x1f\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 8023, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
